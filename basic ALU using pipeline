`timescale 1ns / 1ps
module alu_line(
    input [3:0] rs1, rs2, rd, func,
    input [7:0] addr,
    input  clock1,clock2, // avoid racing condtion by isolating latchdes
    output [15:0] out
);
reg  [15:0] a_n,b_n,l23_z,l34_z;// the wire which carry the value
reg [3:0] l12_rd,l12_func, l23_rd;// intermediate latches and alu function
reg [7:0] l12_addr,l23_addr,l34_addr; // intermidate latches not edge ms_ff

reg [15:0] regbank[0:15]; // register bank
reg [15:0] mem[0:255]; // out memory


 assign out=l34_z;

always@(posedge clock1 ) // stage 1
begin
 a_n <=#2 regbank[rs1];
 b_n <=#2 regbank[rs2];
 l12_rd <=#2 rd;
 l12_func <= #2 func;
 l12_addr <=#2 addr;

end

always@(posedge clock2) // stage 2
begin
    case(l12_func)
    
    0: l23_z <= #2 a_n+b_n;
    1: l23_z <= #2 a_n-b_n;
    2: l23_z <=#2 a_n*b_n;
    3: l23_z <=#2 a_n;
    4: l23_z <=#2 b_n;
    5: l23_z <=#2 a_n & b_n;
    6: l23_z <=#2 a_n | b_n;
    7: l23_z <=#2 a_n ^ b_n;
    8: l23_z <=#2 ~a_n ;
    9: l23_z <=#2 ~b_n;
    10: l23_z <= #2 a_n>>1;
    11 : l23_z <=#2 a_n<<1;
    default: l23_z<= #2 16'hxxxx;
    
    endcase
    l23_rd <= #2 l12_rd;
    l23_addr<= #2 l12_addr;
end 

always@( posedge clock1) // stage 3
begin 
regbank[l23_rd] <= #2 l23_z;
l34_addr<= #2 l23_addr;
l34_z<= #2 l23_z;
end

always@(posedge clock2) // stage 4
begin
 mem[l34_addr]<= #2 l34_z;
end
    
endmodule
